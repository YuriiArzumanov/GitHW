1 Как отказаться от изменений в файле (файлах) находящийся в рабочем каталоге (work directory)?

Открыть терминал или командную строку на компьютере.
Перейдти в рабочий каталог с помощью команды cd (change directory).
Определить, какие файлы были изменены, выполнив команду git status. Видем список измененных файлов в разделе "Changes not staged for commit".
Для отмены изменений в одном файле выполнить команду git checkout <название файла>. Например, git checkout file.txt.
Если хочу отменить изменения во всех файлах, использую команду git checkout . (точка обозначает текущий каталог).
После выполнения команды git checkout мои изменения будут удалены и файлы вернутся к состоянию, в котором они были до изменения.

2 Как вернуть файл из индекса в рабочий каталог?

Чтобы вернуть файл из индекса в рабочий каталог в Git, использую команду git checkout с указанием пути к файлу.
git checkout <название файла> или git checkout -- <путь к файлу>
После выполнения команды файл будет восстановлен из индекса в рабочий каталог.

3.Как отменить ошибочный commit ?

Для отмены последнего коммита можно использовать команду git reset. 
С помощью этой команды сбросить состояние рабочей копии 
до определенного коммита и удалить последний коммит из истории коммитов.
Для отмены последнего коммита:
Открыть терминал и перейдти в рабочую директорию моего репозитория Git.
Ввести команду git reset --soft HEAD~1. Эта команда сбросит состояние рабочей копии 
до предыдущего коммита, оставив изменения в рабочей директории.
Исправить ошибки или изменить свой код нужно 
Ввести команду git add . , чтобы добавить свои изменения в индекс.
Закоммить исправления командой git commit -c ORIG_HEAD. Эта команда создаст новый коммит, 
который отменит предыдущий коммит, сохранив исправления.
Если хочу отменить коммит, который был не последним, можно использовать команду git revert. 
Эта команда создает новый коммит, который отменяет изменения, внесенные в определенный коммит, 
сохраняя историю коммитов.
Для отмены определенного коммита:
Открыть терминал и перейдти в рабочую директорию репозитория Git.
Ввести команду git log, чтобы определить хэш коммита, который хочу отменить.
Введу команду git revert <хэш коммита>. Эта команда создаст новый коммит, который отменяет изменения, 
внесенные в указанный коммит, сохраняя историю коммитов.

4.Как создать новую ветку и переключится в нее?

Открыть терминал и перейдти в каталог Git-репозитория.
Ввести команду git branch для просмотра списка всех веток. 
Эта команда покажет текущую ветку, на которой нахожусь. 
Знак * указывает на текущую ветку.
Ввести команду git branch <имя новой ветки>, чтобы создать новую ветку. 
Например, для создания ветки с именем "feature-branch" вожу git branch feature-branch.
Ввести команду git checkout <имя новой ветки>, чтобы переключиться на новую ветку. 
Например, для переключения на ветку "feature-branch" ввести git checkout feature-branch.
Теперь нахожусь на новой ветке и могу начать работу над своими изменениями. 
использую команду git branch для просмотра списка всех веток и того, на какой ветке нахожусь.

5.В чем отличение между fast-forward merge  and non fast-forfard merge?

Fast-forward merge происходит, когда ветка, хочу объединить, 
имеет историю коммитов, которые не противоречат истории текущей ветки. 
В этом случае Git просто перемещает указатель текущей ветки на указатель ветки, 
которую хочу объединить. Это быстрый процесс и не создает новый коммит.

Non fast-forward merge происходит, когда ветка, которую хочу объединить, 
имеет историю коммитов, которые противоречат истории текущей ветки. 
В этом случае Git создает новый коммит, который объединяет изменения из двух веток. 
Этот новый коммит содержит информацию о том, какие изменения были объединены и из каких веток.

6.Когда может возникнуть конфликт слияния веток, как  его разрешить?

Конфликт слияния веток может возникнуть, когда две ветки, которые пытаюсь объединить, 
имеют различные изменения в одном и том же файле. Если это произошло, Git не может определить, 
какую версию файла следует использовать, и возникает конфликт.
Чтобы решить конфликт слияния веток, необходимо выполнить:
Открыть консоль/терминал и перейти в рабочую директорию репозитория Git.
Выполнить команду git status, чтобы увидеть, какие файлы вызвали конфликт.
Открыть каждый файл, который вызвал конфликт, в текстовом редакторе и найти места, где возникли конфликты.
Изменить содержимое файла так, чтобы оно содержало правильные изменения из обеих веток. Удалить метки конфликта Git, 
такие как <<<<<< HEAD, ======, >>>>>>.
Сохраните изменения в файле.
Добавить изменения в индекс Git с помощью команды git add <file>.
Закоммить изменения с помощью команды git commit.

7.Можно ли удалить ветку? Как? 

Для удаления ветки в Git можно использовать команду git branch -d или git branch -D

